PROT
from textwrap import wrap
f = open('rosalind_prot.txt')
l = f.readlines()
cod= l[0]
rna_codons = {
"UUU": "F", "CUU": "L", "AUU": "I", "GUU": "V", "UUC": "F", "CUC": "L", "AUC": "I", "GUC": "V",
           "UUA": "L", "CUA": "L", "AUA": "I", "GUA": "V",
           "UUG": "L", "CUG": "L", "AUG": "M", "GUG": "V",
           "UCU": "S", "CCU": "P", "ACU": "T", "GCU": "A",
           "UCC": "S", "CCC": "P", "ACC": "T", "GCC": "A",
           "UCA": "S", "CCA": "P", "ACA": "T", "GCA": "A",
           "UCG": "S", "CCG": "P", "ACG": "T", "GCG": "A",
           "UAU": "Y", "CAU": "H", "AAU": "N", "GAU": "D",
           "UAC": "Y", "CAC": "H", "AAC": "N", "GAC": "D",
           "UAA": "*", "CAA": "Q", "AAA": "K", "GAA": "E",
           "UAG": "*", "CAG": "Q", "AAG": "K", "GAG": "E",
           "UGU": "C", "CGU": "R", "AGU": "S", "GGU": "G",
           "UGC": "C", "CGC": "R", "AGC": "S", "GGC": "G",
           "UGA": "*", "CGA": "R", "AGA": "R", "GGA": "G",
           "UGG": "W", "CGG": "R", "AGG": "R", "GGG": "G"
}
codons= wrap(cod, 3)
def prot(codons):
    protein= []
    for c in codons:
        protein.append(rna_codons[c])
    return ''.join(protein)

print (prot(codons))

SPLC
from Bio import SeqIO
f = open('rosalind_splc.txt')
l = f.readlines()
seq_name= []
seq_bases= []
for seq in SeqIO.parse(f, 'fasta'):
    seq_name.append(str(seq.name))
    seq_bases.append(str(seq.seq))

dna= seq_bases[0]
introns= seq_bases[1:]
rna_codons = {
    'TCT': 'S', 'TCC': 'S', 'TCA': 'S', 'TCG': 'S', 
    'TTT': 'F', 'TTC': 'F',
    'TTA': 'L', 'TTG': 'L', 'CTT': 'L', 'CTC': 'L', 'CTA': 'L', 'CTG': 'L',
    'TAT': 'Y', 'TAC': 'Y',
    'TGT': 'C', 'TGC': 'C',
    'TGG': 'W', 
    'CCT': 'P', 'CCC': 'P', 'CCA': 'P', 'CCG': 'P',
    'CAT': 'H', 'CAC': 'H',
    'CAA': 'Q', 'CAG': 'Q',
    'CGT': 'R', 'CGC': 'R', 'CGA': 'R', 'CGG': 'R', 'AGA': 'R', 'AGG': 'R',
    'ATT': 'I', 'ATC': 'I', 'ATA': 'I',
    'ATG': 'M', 
    'ACT': 'T', 'ACC': 'T', 'ACA': 'T', 'ACG': 'T', 
    'AAT': 'N', 'AAC': 'N', 
    'AAA': 'K', 'AAG': 'K',
    'GTT': 'V', 'GTC': 'V', 'GTA': 'V', 'GTG': 'V',
    'GCT': 'A', 'GCC': 'A', 'GCA': 'A', 'GCG': 'A',
    'GAT': 'D', 'GAC': 'D',
    'GAA': 'E', 'GAG': 'E',
    'GGT': 'G', 'GGC': 'G', 'GGA': 'G', 'GGG': 'G',
    'TAA': 'end', 'TAG': 'end', 'TGA': 'end'
}
def splc(dna, introns):
    for intr in introns:
        dna= dna.replace(intron, '')
    protein= ''
    for i in range(0, len(dna)-2, 3):
        if rna_codons[dna[i:i+3]]== 'end':
            break
        protein += rna_codons[dna[i:i+3]]
    return protein

print (splc(dna, introns))

HAMM
f = open('rosalind_hamm.txt')
l = f.readlines()
s1= l[0]
s2= l[1]
def hamm(s1, s2):
    hamd= 0
    for i in range(len(s1)):
        if s1[i]!=s2[i]:
            hamd+=1
    return hamd
print (hamm(s1,s2))

GRPH
from Bio import SeqIO
seq = []
seqnames = []
with open ("rosalind_grph.txt") as f:
    for i in SeqIO.parse(f,'fasta'):
        seq.append(str(i.seq))
        seqnames.append(str(i.name))
for i in range(len(seq)):
    for b in range(len(seq)):
        if b!=i:
            if seq[i][-3:]==seq[b][:3]:
                print (seqnames[i], seqnames[b])

TRAN
from Bio import SeqIO
transitions = [('A', 'G'), ('T', 'C'), ('C', 'T'), ('G', 'A')]
transversions = [('A', 'T'), ('A', 'C'), ('T', 'A'), ('T', 'G'), ('C', 'A'), ('C', 'G'), ('G', 'T'), ('G', 'C')]
names= []
seqs= []
with open ("rosalind_tran.txt",'r') as fa:
    for s  in SeqIO.parse(fa,'fasta'):
        names.append(str(s.name))
        seqs.append(str(s.seq))
transicount = 0
transvcount= 0
s1, s2 = seqs
for i in range(len(s1)):
    if (s1[i], s2[i]) in transitions:
        transicount+=1
    if (s1[i], s2[i]) in transversions:
        transvcount+=1
print(transicount/transvcount)

TREE
f = open('rosalind_treee.txt')
l = f.readlines()
n= int(l[0])
k= len(l)-1
mine= n-1
res= mine-k
print (res)

PDST
from Bio import SeqIO
seq = []
seqnames = []
with open ("rosalind_pdst.txt") as f:
    for i in SeqIO.parse(f,'fasta'):
        seq.append(str(i.seq))
        seqnames.append(str(i.name))
from difflib import SequenceMatcher
def similar(s1, s2): 
    return '%.5f'% (SequenceMatcher(None, s1, s2).ratio())
for i in range(len(seqnames)):
    for j in range(len(seqnames)):
        print(similar(seq[i], seq[j]))

SSEQ
from Bio import SeqIO
seq = []
seqnames = []
with open ("rosalind_sseqq.txt") as f:
    for i in SeqIO.parse(f,'fasta'):
        seq.append(str(i.seq))
        seqnames.append(str(i.name))
string= seq[0]
substring= seq[1]
s= string.find(substring)
t= string.find(substring, s)
print (s, t)

LCSQ
from Bio import SeqIO
seq = []
seqnames = []
with open ("rosalind_lcsq.txt") as f:
    for i in SeqIO.parse(f,'fasta'):
        seq.append(str(i.seq))
        seqnames.append(str(i.name))
s, t= list(seq[0]), list(seq[1])
subs= []
for x in s:
    if x in t:
        i= t.index(x)
        subs.append(x)
        del t[:i]    
print (''.join(subs))

ORF
from Bio import SeqIO
seq = []
seqnames = []
with open ("rosalind_orf.txt") as f:
    for i in SeqIO.parse(f,'fasta'):
        seq.append(str(i.seq))
        seqnames.append(str(i.name))
from textwrap import wrap
dna_codons= {
    'TCT': 'S', 'TCC': 'S', 'TCA': 'S', 'TCG': 'S', 
    'TTT': 'F', 'TTC': 'F',
    'TTA': 'L', 'TTG': 'L', 'CTT': 'L', 'CTC': 'L', 'CTA': 'L', 'CTG': 'L',
    'TAT': 'Y', 'TAC': 'Y',
    'TGT': 'C', 'TGC': 'C',
    'TGG': 'W', 
    'CCT': 'P', 'CCC': 'P', 'CCA': 'P', 'CCG': 'P',
    'CAT': 'H', 'CAC': 'H',
    'CAA': 'Q', 'CAG': 'Q',
    'CGT': 'R', 'CGC': 'R', 'CGA': 'R', 'CGG': 'R', 'AGA': 'R', 'AGG': 'R',
    'ATT': 'I', 'ATC': 'I', 'ATA': 'I',
    'ATG': 'M', 
    'ACT': 'T', 'ACC': 'T', 'ACA': 'T', 'ACG': 'T', 
    'AAT': 'N', 'AAC': 'N', 
    'AAA': 'K', 'AAG': 'K',
    'GTT': 'V', 'GTC': 'V', 'GTA': 'V', 'GTG': 'V',
    'GCT': 'A', 'GCC': 'A', 'GCA': 'A', 'GCG': 'A',
    'GAT': 'D', 'GAC': 'D',
    'GAA': 'E', 'GAG': 'E',
    'GGT': 'G', 'GGC': 'G', 'GGA': 'G', 'GGG': 'G',
    'TAA': 'end', 'TAG': 'end', 'TGA': 'end'
}
s= seq
codons= wrap(s, 3)  
protein= []
def orf(s):
    for c in codons:
        if c=='ATG':
            protein.append('M')
            protein.append(dna_codons[c])
            if dna_codons[c]== 'end':
                break
return protein
print (orf(s))

PERM
import itertools
f = open('rosalind_perm.txt')
n= int(f.read())
lst= []
for i in range(1, n+1):
    lst.append(i)
perm= list(map(str,(list(itertools.permutations(lst)))))
print (len(perm))
for p in perm:
    print (" ".join(p))

INOD
f = open('rosalind_inod.txt')
l= int(f.read())
n= (l-4) + 2
print (n)

EDIT
from Bio import SeqIO
seq_name= []
seq_bases= []
with open ('rosalind_edit.txt', 'r') as fa:
    for s in SeqIO.parse(fa, 'fasta'):
        seq_name.append(str(s.name))
        seq_bases.append(str(s.seq))
w1, w2= list(seq_bases[0]), list(seq_bases[1])
def edit(w1, w2):
    edit= 0
    for x in w1:
        if x not in w2:
            edit+=1
            w1.remove(x)
    return (edit)
print (edit(w1, w2))

EDTA
from Bio import SeqIO
seq_name, seq_bases = [], []
with open ("rosalind_edta.txt", 'r') as fa:
    for s in SeqIO.parse(fa, 'fasta'):
        seq_name.append(str(s.name))
        seq_bases.append(str(s.seq))
w1, w2= list(seq_bases[0]), list(seq_bases[1])
def edit(w1, w2):
    edit= 0
    w3=[]
    i=0
    j=0
    for x in w1:
        if w1[i]!=w2[i]:
            edit+=1
            i+=1
        else:
            w3.append(x)
    for x in w3:
        if w3[j]!=w2[j]:
            edit+=1
            w3.insert(j, w2[j])
            j+=1
    return (edit)
print (edit(w1, w2))
def edta(w1, w2):
    w11=[]
    w22=[]
    y= 0
    j= 0
    r= 0
    for e in range(len(w1)):
        if w1[y]==w2[y]:
            w11.append(w1[y])
            y+=1
        elif w1[y]!=w2[y]:
            w11.append('-')
            y+=1
    for g in range(len(w2)):
        if w2[j]==w1[j]:
            w22.append(w2[j])
            j+=1
        elif w2[j]!=w1[j]:
            w22.append('-')
    if w11[r]=='-':
        if w22=='-':
            w11[r]=w1[r]
            r+=1
    return ''.join(w11), ''.join(w22)
print (edta(w1, w2))

GLOB
from Bio import SeqIO
seq_name= []
seq_bases= []
with open ('rosalind_glob.txt', 'r') as fa:
    for s in SeqIO.parse(fa, 'fasta'):
        seq_name.append(str(s.name))
        seq_bases.append(str(s.seq))
global = {
    ('W', 'F'): 1, ('L', 'R'): -2, ('S', 'P'): -1, ('V', 'T'): 0,
    ('Q', 'Q'): 5, ('N', 'A'): -2, ('Z', 'Y'): -2, ('W', 'R'): -3,
    ('Q', 'A'): -1, ('S', 'D'): 0, ('H', 'H'): 8, ('S', 'H'): -1,
    ('H', 'D'): -1, ('L', 'N'): -3, ('W', 'A'): -3, ('Y', 'M'): -1,
    ('G', 'R'): -2, ('Y', 'I'): -1, ('Y', 'E'): -2, ('B', 'Y'): -3,
    ('Y', 'A'): -2, ('V', 'D'): -3, ('B', 'S'): 0, ('Y', 'Y'): 7,
    ('G', 'N'): 0, ('E', 'C'): -4, ('Y', 'Q'): -1, ('Z', 'Z'): 4,
    ('V', 'A'): 0, ('C', 'C'): 9, ('M', 'R'): -1, ('V', 'E'): -2,
    ('T', 'N'): 0, ('P', 'P'): 7, ('V', 'I'): 3, ('V', 'S'): -2,
    ('Z', 'P'): -1, ('V', 'M'): 1, ('T', 'F'): -2, ('V', 'Q'): -2,
    ('K', 'K'): 5, ('P', 'D'): -1, ('I', 'H'): -3, ('I', 'D'): -3,
    ('T', 'R'): -1, ('P', 'L'): -3, ('K', 'G'): -2, ('M', 'N'): -2,
    ('P', 'H'): -2, ('F', 'Q'): -3, ('Z', 'G'): -2, ('X', 'L'): -1,
    ('T', 'M'): -1, ('Z', 'C'): -3, ('X', 'H'): -1, ('D', 'R'): -2,
    ('B', 'W'): -4, ('X', 'D'): -1, ('Z', 'K'): 1, ('F', 'A'): -2,
    ('Z', 'W'): -3, ('F', 'E'): -3, ('D', 'N'): 1, ('B', 'K'): 0,
    ('X', 'X'): -1, ('F', 'I'): 0, ('B', 'G'): -1, ('X', 'T'): 0,
    ('F', 'M'): 0, ('B', 'C'): -3, ('Z', 'I'): -3, ('Z', 'V'): -2,
    ('S', 'S'): 4, ('L', 'Q'): -2, ('W', 'E'): -3, ('Q', 'R'): 1,
    ('N', 'N'): 6, ('W', 'M'): -1, ('Q', 'C'): -3, ('W', 'I'): -3,
    ('S', 'C'): -1, ('L', 'A'): -1, ('S', 'G'): 0, ('L', 'E'): -3,
    ('W', 'Q'): -2, ('H', 'G'): -2, ('S', 'K'): 0, ('Q', 'N'): 0,
    ('N', 'R'): 0, ('H', 'C'): -3, ('Y', 'N'): -2, ('G', 'Q'): -2,
    ('Y', 'F'): 3, ('C', 'A'): 0, ('V', 'L'): 1, ('G', 'E'): -2,
    ('G', 'A'): 0, ('K', 'R'): 2, ('E', 'D'): 2, ('Y', 'R'): -2,
    ('M', 'Q'): 0, ('T', 'I'): -1, ('C', 'D'): -3, ('V', 'F'): -1,
    ('T', 'A'): 0, ('T', 'P'): -1, ('B', 'P'): -2, ('T', 'E'): -1,
    ('V', 'N'): -3, ('P', 'G'): -2, ('M', 'A'): -1, ('K', 'H'): -1,
    ('V', 'R'): -3, ('P', 'C'): -3, ('M', 'E'): -2, ('K', 'L'): -2,
    ('V', 'V'): 4, ('M', 'I'): 1, ('T', 'Q'): -1, ('I', 'G'): -4,
    ('P', 'K'): -1, ('M', 'M'): 5, ('K', 'D'): -1, ('I', 'C'): -1,
    ('Z', 'D'): 1, ('F', 'R'): -3, ('X', 'K'): -1, ('Q', 'D'): 0,
    ('X', 'G'): -1, ('Z', 'L'): -3, ('X', 'C'): -2, ('Z', 'H'): 0,
    ('B', 'L'): -4, ('B', 'H'): 0, ('F', 'F'): 6, ('X', 'W'): -2,
    ('B', 'D'): 4, ('D', 'A'): -2, ('S', 'L'): -2, ('X', 'S'): 0,
    ('F', 'N'): -3, ('S', 'R'): -1, ('W', 'D'): -4, ('V', 'Y'): -1,
    ('W', 'L'): -2, ('H', 'R'): 0, ('W', 'H'): -2, ('H', 'N'): 1,
    ('W', 'T'): -2, ('T', 'T'): 5, ('S', 'F'): -2, ('W', 'P'): -4,
    ('L', 'D'): -4, ('B', 'I'): -3, ('L', 'H'): -3, ('S', 'N'): 1,
    ('B', 'T'): -1, ('L', 'L'): 4, ('Y', 'K'): -2, ('E', 'Q'): 2,
    ('Y', 'G'): -3, ('Z', 'S'): 0, ('Y', 'C'): -2, ('G', 'D'): -1,
    ('B', 'V'): -3, ('E', 'A'): -1, ('Y', 'W'): 2, ('E', 'E'): 5,
    ('Y', 'S'): -2, ('C', 'N'): -3, ('V', 'C'): -1, ('T', 'H'): -2,
    ('P', 'R'): -2, ('V', 'G'): -3, ('T', 'L'): -1, ('V', 'K'): -2,
    ('K', 'Q'): 1, ('R', 'A'): -1, ('I', 'R'): -3, ('T', 'D'): -1,
    ('P', 'F'): -4, ('I', 'N'): -3, ('K', 'I'): -3, ('M', 'D'): -3,
    ('V', 'W'): -3, ('W', 'W'): 11, ('M', 'H'): -2, ('P', 'N'): -2,
    ('K', 'A'): -1, ('M', 'L'): 2, ('K', 'E'): 1, ('Z', 'E'): 4,
    ('X', 'N'): -1, ('Z', 'A'): -1, ('Z', 'M'): -1, ('X', 'F'): -1,
    ('K', 'C'): -3, ('B', 'Q'): 0, ('X', 'B'): -1, ('B', 'M'): -3,
    ('F', 'C'): -2, ('Z', 'Q'): 3, ('X', 'Z'): -1, ('F', 'G'): -3,
    ('B', 'E'): 1, ('X', 'V'): -1, ('F', 'K'): -3, ('B', 'A'): -2,
    ('X', 'R'): -1, ('D', 'D'): 6, ('W', 'G'): -2, ('Z', 'F'): -3,
    ('S', 'Q'): 0, ('W', 'C'): -2, ('W', 'K'): -3, ('H', 'Q'): 0,
    ('L', 'C'): -1, ('W', 'N'): -4, ('S', 'A'): 1, ('L', 'G'): -4,
    ('W', 'S'): -3, ('S', 'E'): 0, ('H', 'E'): 0, ('S', 'I'): -2,
    ('H', 'A'): -2, ('S', 'M'): -1, ('Y', 'L'): -1, ('Y', 'H'): 2,
    ('Y', 'D'): -3, ('E', 'R'): 0, ('X', 'P'): -2, ('G', 'G'): 6,
    ('G', 'C'): -3, ('E', 'N'): 0, ('Y', 'T'): -2, ('Y', 'P'): -3,
    ('T', 'K'): -1, ('A', 'A'): 4, ('P', 'Q'): -1, ('T', 'C'): -1,
    ('V', 'H'): -3, ('T', 'G'): -2, ('I', 'Q'): -3, ('Z', 'T'): -1,
    ('C', 'R'): -3, ('V', 'P'): -2, ('P', 'E'): -1, ('M', 'C'): -1,
    ('K', 'N'): 0, ('I', 'I'): 4, ('P', 'A'): -1, ('M', 'G'): -3,
    ('T', 'S'): 1, ('I', 'E'): -3, ('P', 'M'): -2, ('M', 'K'): -1,
    ('I', 'A'): -1, ('P', 'I'): -3, ('R', 'R'): 5, ('X', 'M'): -1,
    ('L', 'I'): 2, ('X', 'I'): -1, ('Z', 'B'): 1, ('X', 'E'): -1,
    ('Z', 'N'): 0, ('X', 'A'): 0, ('B', 'R'): -1, ('B', 'N'): 3,
    ('F', 'D'): -3, ('X', 'Y'): -1, ('Z', 'R'): 0, ('F', 'H'): -1,
    ('B', 'F'): -3, ('F', 'L'): 0, ('X', 'Q'): -1, ('B', 'B'): 4
}

def glob(s,t):
    a= int(pairwise2.align.globalds(s, t, global, -5, -5))
    return (alignments[0][2])
s, t= seq_bases[0], seq_bases[1]
print (glob(s, t))

MULT
def mult(b):
    count = 0
    leng= (len(b))
    for i in range(0, leng-1):
        for j in range(i+1, leng):
            for k in range(len(b[j])):
                if l[i][k] != l[j][k]:
                    count -= 1
    for r in range(leng):
        print(b[r])
    return count

f = open('rosalind_mult.txt')
l = f.readlines()
for x in f:
    x.strip().split(' ')
mult(aligned)
